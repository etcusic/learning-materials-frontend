{"version":3,"sources":["apiRoot.js","helperFunctions/createExerciseObject.js","helperFunctions/validateExercise.js","components/Placeholder.js","components/Welcome.js","containers/OptionsContainer.js","helperFunctions/shuffleCards.js","components/PracticeCard.js","components/EndOfPracticeRound.js","exercises/Practice.js","components/MultipleChoiceCard.js","components/MultipleChoiceResults.js","exercises/MultipleChoice.js","helperFunctions/sleepOneSecond.js","components/SpeedGameCard.js","components/SpeedGameBoard.js","exercises/SpeedGame.js","exercises/Bingo.js","containers/ExerciseContainer.js","components/BeginExerciseButton.js","containers/Home.js","actions/initializeApp.js","App.js","reportWebVitals.js","index.js"],"names":["API_ROOT","getCards","decks","cards","forEach","deck","card","push","validateExercise","exercise","activity","length","alert","validateBingo","Placeholder","Welcome","displayOptions","onClick","OptionsContainer","displayLevels","onChange","event","changeLevel","value","map","level","i","displayActivities","changeActivity","displaySides","changeDisplaySide","side","parseInt","target","setState","displaySide","addDeck","state","checked","props","find","id","filter","checkState","console","log","this","type","name","setExercise","Component","shuffleCards","arrayOfCards","sort","Math","random","PracticeCard","flipCard","front","className","nextCard","removeCard","EndOfPracticeRound","nextRound","resetDeck","Practice","index","currentCardIndex","nextRoundButton","Object","assign","completedCards","trueOrFalse","english","spanish","deckNames","join","termDisplay","exitExercise","MultipleChoiceCard","option","color","selectCard","style","backgroundColor","MultipleChoiceResults","deckName","result","exitView","correctAnswers","questions","MultipleChoice","setAnswer","answer","submitAnswer","point","currentCard","cardDisplay","round","setNextRound","totalPoints","endMultipleChoiceRound","shuffleMultipleChoice","shuffledCards","slice","addPoint","options","shuffledOptions","answerOptions","points","newView","setNewView","sleepOneSecond","Promise","resolve","setTimeout","SpeedGameCard","term","SpeedGameBoard","SpeedGame","initializeGame","setRound","timerMinusOne","time","timer","inPlay","then","gameOver","score","endGame","filteredCards","currentSet","Bingo","src","alt","ExerciseContainer","setPractice","view","setMultipleChoice","setSpeedGame","setBingo","changeView","setActivity","component","BeginExerciseButton","beginExercise","Home","setDecks","newExercise","createExerciseObject","fetch","response","json","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d522e486.chunk.js","sourcesContent":["const DEV_URL = \"http://localhost:3001/\"\nconst PROD_URL = \"https://learning-materials-api.herokuapp.com/\"\nexport const API_ROOT = process.env.NODE_ENV === 'development' ? DEV_URL : PROD_URL","export const createExerciseObject = exercise => {\n    let newExercise = {\n        activity: exercise.activity,\n        level: exercise.level,\n        termDisplay: exercise.displaySide,\n        cardDisplay: exercise.displaySide === \"english\" ? \"spanish\" : \"english\",\n        deckNames: getDeckNames(exercise.decks),\n        cards: getCards(exercise.decks)\n    }\n    return newExercise\n}\n\nfunction getDeckNames (decks) {\n    return decks.map(deck => deck.name)\n}\n\nfunction getCards (decks) {\n    let cards = []\n    decks.forEach(deck => deck.cards.forEach(card => cards.push(card)))\n    return cards\n}","export const validateExercise = exercise => {\n    switch (exercise.activity){\n        case 'Practice':\n                return validatePractice(exercise)\n                break;\n            case 'Multiple Choice':\n                return validateMultipleChoice(exercise)\n                break;\n            case 'Speed Game':\n                return validateSpeedGame(exercise)\n                break;\n            case 'Bingo':\n                return validateBingo(exercise)\n                break;\n            default:\n                return true\n    }\n}\n\nfunction validatePractice(exercise){\n    // no special validators needed yet\n    return true\n}\n\nfunction validateMultipleChoice(exercise){\n    // no special validators needed yet\n    return true\n}\n\nfunction validateSpeedGame(exercise){\n    // no special validators needed yet\n    return true\n}\n\nfunction validateBingo(exercise){\n    if (exercise.cards.length < 24){\n        alert(`You need at least 24 vocab cards to play Bingo. Please select another set(s).`)\n        return false\n    } else {\n        return true\n    }\n}","import React from 'react';\n\nconst Placeholder = () => {\n    return (\n        <div>\n           <h1>Placeholder</h1>\n        </div>\n    );\n}\n  \nexport default Placeholder","import React from 'react';\n\nconst Welcome = ({ displayOptions }) => {\n    return (\n        <div>\n            <h1>Welcome!</h1>\n            <h2>Practice Spanish / English</h2>\n            <button onClick={ displayOptions }>Get Started</button>\n        </div>\n    );\n}\n  \nexport default Welcome","import React, { Component } from 'react';\n\nclass OptionsContainer extends Component {\n\n    constructor(){\n        super()\n        this.state = { \n            level: 0, \n            decks: [],\n            activity: \"invalid\",\n            displaySide: \"invalid\"\n        }\n    }\n\n    displayLevels = () => {\n        // will need to add sets with different levels\n        const levels = [1]\n        return (\n            <select onChange={ event => this.changeLevel(event) }>\n                <option key=\"level-0\" value=\"0\">-- select level --</option>\n                { levels.map((level, i) => <option key={`level-${i + 1}`} value={ level }>{ level }</option>) }\n            </select>\n        )\n    }\n\n    displayActivities = () => {\n        const activities = [\"Practice\", \"Multiple Choice\", \"Speed Game\", \"Bingo\"]\n        return (\n            <select onChange={ event => this.changeActivity(event) }>\n                <option key=\"activity-0\" value=\"invalid\">-- select activity --</option>\n                { activities.map((activity, i) => <option key={`activity-${i + 1}`} value={ activity }>{ activity }</option>) }\n            </select>\n        )\n    }\n\n    displaySides = () => {\n        const sides = [\"english\", \"spanish\"]\n        return (\n            <select onChange={ event => this.changeDisplaySide(event) }>\n                <option key=\"side-0\" value=\"invalid\">-- select display side --</option>\n                { sides.map((side, i) => <option key={`${side}`} value={ side }>{ side }</option>) }\n            </select>\n        )\n    }\n\n    changeLevel = (event) => {\n        let value = parseInt(event.target.value)\n        this.setState({ level: value })\n    }\n\n    changeActivity = (event) => {\n        let value = event.target.value\n        this.setState({ activity: value })\n    }\n\n    changeDisplaySide = (event) => {\n        let value = event.target.value\n        this.setState({ displaySide: value })\n    }\n\n    addDeck = (event) => {\n        let value = parseInt(event.target.value)\n        let decks = [...this.state.decks]\n        if (event.target.checked){\n            decks.push(this.props.decks.find( deck => deck.id === value ))\n        } else {\n            decks = decks.filter(deck => deck.id !== value)\n        }\n        this.setState({ decks: decks })\n    }\n\n    checkState = () => {\n        console.log(this.state)\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Select an exercise.</h1>\n                \n                <h2>\n                    <label>Level: </label>\n                    { this.displayLevels() }\n                </h2>\n                \n                <h2>\n                    <label>Activity: </label>\n                    { this.displayActivities() }\n                </h2>\n\n                <h2>\n                    <label>Display side: </label>\n                    { this.displaySides() }\n                </h2>\n\n                <h2>\n                    <label>Deck{`(s):`} </label>\n                </h2>\n                    { \n                        this.props.decks\n                                    .filter(deck => deck.level === this.state.level)\n                                    .map(deck => {\n                                        return (\n                                            <div key={ deck.name } >\n                                                <input \n                                                    type=\"checkbox\"\n                                                    value={ deck.id } \n                                                    onChange={ this.addDeck } \n                                                />\n                                                <label>\n                                                    { deck.name } - { deck.cards.length }\n                                                </label>\n                                            </div>\n                                        )\n                        })\n                    }\n                \n                <h3>\n                    {   // check to make sure all fields are valid => if true, display button\n                        this.state.decks.length === 0 || \n                        this.state.level === 0 || \n                        this.state.activity === \"invalid\" ||\n                        this.state.displaySide === \"invalid\" \n                        ? \n                        \"All fields must be valid to continue\" \n                        : \n                        <button onClick={ () => this.props.setExercise(this.state) }>Set Exercise</button>\n                    }\n                </h3>\n                \n            </div>\n        )\n    }\n\n}\n  \nexport default OptionsContainer","export const shuffleCards = (arrayOfCards) => {\n    return arrayOfCards.sort(() => Math.random() - 0.5)\n}","import React, { Component } from 'react';\n\nclass PracticeCard extends Component {\n\n    constructor(){\n        super()\n        this.state = {\n            side: \"english\"\n        }\n    }\n\n    componentDidMount(){\n        this.setState({ side: this.props.front })\n    }\n\n    flipCard = () => {\n        this.state.side === \"english\" ? this.setState({ side: \"spanish\" }) : this.setState({ side: \"english\" })\n    }\n\n    render() {\n        return (\n            <div>\n                <h2>Card component: </h2>\n\n                <div>\n                    <button onClick={ this.flipCard }>Flip Card</button>\n                </div>\n\n                <br></br>\n\n                <div className=\"practice-card\">\n                    <div className=\"practice-card-text\">\n                        { this.props.card[this.state.side] }\n                    </div>\n                </div>\n\n                <br></br>\n\n                <div>\n                    <button onClick={ this.props.nextCard }>Next Card</button>\n                    <button onClick={ this.props.removeCard }>Remove Card</button>\n                </div>\n\n                    \n            </div>\n        )\n    }\n\n}\n  \nexport default PracticeCard","import React from 'react';\n\nconst EndOfPracticeRound = ({ nextRound, resetDeck }) => {\n    return (\n        <div>\n            <div>\n                <button onClick={ nextRound }>Next Round</button>\n            </div>\n\n            <br></br><br></br>\n\n            <div>\n                <button onClick={ resetDeck }>Reset Practice</button>\n            </div>\n        </div>\n    );\n}\n  \nexport default EndOfPracticeRound","import React, { Component } from 'react';\nimport { shuffleCards } from '../helperFunctions/shuffleCards'\nimport PracticeCard from '../components/PracticeCard'\nimport EndOfPracticeRound from '../components/EndOfPracticeRound'\n\nclass Practice extends Component {\n\n    constructor(){\n        super()\n        this.state = {\n            cards: [{english: \"english\", spanish: \"spanish\"}],\n            completedCards: [],\n            currentCardIndex: 0,\n            nextRoundButton: false\n        }\n    }\n\n    componentDidMount(){\n        console.log(this.props)\n        this.resetDeck()\n    }\n\n    nextCard = () => {\n        let index = this.state.currentCardIndex + 1\n        // check if last card in deck\n        index < this.state.cards.length ? \n        this.setState({ currentCardIndex: index }) :\n        this.setState({ \n            currentCardIndex: 0,\n            nextRoundButton: true \n        })    \n    }\n\n    removeCard = () => {\n        let card = Object.assign({}, this.state.cards[this.state.currentCardIndex])\n        let completedCards = [...this.state.completedCards]\n        completedCards.push(card)\n        let cards = [...this.state.cards].filter((card, index) => index !== this.state.currentCardIndex)\n        // check if it is the last card and display accordingly\n        let trueOrFalse = (this.state.cards.length - 1) === this.state.currentCardIndex ? true : false\n        let index = trueOrFalse ? 0 : this.state.currentCardIndex\n        this.setState({\n            cards: cards,\n            completedCards: completedCards,\n            currentCardIndex: index,\n            nextRoundButton: trueOrFalse\n        })\n    }\n\n    nextRound = () => {\n        let cards = [...this.state.cards]\n        this.setState({ \n            cards: shuffleCards(cards),\n            currentCardIndex: 0,\n            nextRoundButton: false\n        })\n    }\n\n    resetDeck = () => {\n        let cards = shuffleCards([...this.props.cards])\n        this.setState({ \n            cards: cards,\n            completedCards: [],\n            currentCardIndex: 0,\n            nextRoundButton: false\n        })\n    }\n\n    checkState = () => {\n        console.log(this.state)\n    }\n\n    render() {\n        return (\n            <div>\n                <button onClick={ this.checkState }>Check State</button>\n                <h2>Practice Exercise:</h2>\n                <div>\n                    ( { this.props.deckNames.join(\", \")} )\n                </div>\n                <div>\n                    <div>\n                        <h3>Cards remaining: { this.state.cards.length }</h3>\n                    </div>\n\n                    <div>\n                        <h3>Cards completed: { this.state.completedCards.length }</h3>\n                    </div>\n\n                    <div>\n                        <h3>Current Card: { this.state.currentCardIndex + 1 } / { this.state.cards.length }</h3>\n                    </div>\n\n                    <div>\n                        {\n                            this.state.nextRoundButton \n                            ?\n                            <EndOfPracticeRound \n                                nextRound={ this.nextRound }\n                                resetDeck={ this.resetDeck }\n                            />\n                            :\n                            <PracticeCard \n                                front={ this.props.termDisplay }\n                                card={ this.state.cards[this.state.currentCardIndex] } \n                                removeCard={ this.removeCard } \n                                nextCard={ this.nextCard}\n                            />\n                        }\n                    </div>\n\n                    <br></br><br></br>\n                    \n                    <button onClick={ this.props.exitExercise }>Exit Exercise</button>\n\n                </div>\n            </div>\n        )\n    }\n\n}\n  \nexport default Practice","import React from 'react';\n\nconst MultipleChoiceCard = ({ index, option, color, selectCard }) => {\n    return (\n        <div \n            key={`option-${index}`} \n            className=\"practice-card\" \n            style={{ backgroundColor: color }} \n            onClick={ () => selectCard(option) }\n        >\n            <div className=\"practice-card-text\">\n                { option }\n            </div>\n        \n        </div>\n    );\n}\n  \nexport default MultipleChoiceCard","import React from 'react';\n\nconst MultipleChoiceResults = ({ deckName, result, exitView }) => {\n    return (\n        <div>\n            <h2>Multiple Choice Results - { deckName }</h2>\n\n            <h3>Score: { result.correctAnswers } / { result.questions }</h3>\n\n            <br></br><br></br><br></br>\n\n            <button onClick={ exitView }>Back to Options</button>\n        </div>\n    );\n}\n  \nexport default MultipleChoiceResults","import React, { Component } from 'react';\nimport { shuffleCards } from '../helperFunctions/shuffleCards'\nimport MultipleChoiceCard from '../components/MultipleChoiceCard.js'\nimport MultipleChoiceResults from '../components/MultipleChoiceResults.js'\n\nclass MultipleChoice extends Component {\n\n    constructor(){\n        super()\n        this.state = {\n            cards: [],\n            round: 0,\n            correctAnswers: 0,\n            currentCard: {english: \"English Side\", spanish: \"Spanish Side\"}, \n            answerOptions: [\"\", \"\", \"\", \"\"],\n            answer: \"\"\n        }\n    }\n\n    componentDidMount(){\n        let cards = shuffleCards(this.props.cards)\n        let currentCard = cards[0]\n        let answerOptions = shuffleCards(cards.slice(0, 4)).map(card => card[this.props.cardDisplay])\n        this.setState({ \n            cards: cards,\n            currentCard: currentCard,\n            answerOptions: answerOptions\n        })\n    }\n\n    setAnswer = (event) => {\n        this.setState({\n            answer: event.target.value\n        });\n    }\n\n    submitAnswer = () => {\n        let point = this.state.answer === this.state.currentCard[this.props.cardDisplay] ? 1 : 0\n        if (this.state.answer === \"\"){\n            alert('Invalid response. Please select one of the options!')\n        } else if ((this.state.round + 1) < this.state.cards.length) {\n            this.setNextRound(point)\n        } else {\n            const totalPoints = this.state.correctAnswers + point\n            this.endMultipleChoiceRound(totalPoints)\n        }\n    }\n\n    shuffleMultipleChoice = (nextRound) => {\n        let cards = [...this.state.cards].filter((card, i) => i !== (nextRound))\n        let shuffledCards = shuffleCards(cards)\n        let choices = [this.state.cards[nextRound], ...shuffledCards.slice(0, 3)]\n        return choices\n    }\n\n    setNextRound = (point) => {\n        const nextRound = this.state.round + 1\n        const addPoint = this.state.correctAnswers + point\n        const options = this.shuffleMultipleChoice(nextRound)\n        const shuffledOptions = shuffleCards([...options]).map(card => card[this.props.cardDisplay])\n        this.setState({\n            round: nextRound,\n            correctAnswers: addPoint,\n            currentCard: options[0], \n            answerOptions: shuffledOptions,\n            answer: \"\"\n        })\n    }\n\n    endMultipleChoiceRound = (points) => {\n        const result = {\n            questions: this.props.cards.length, \n            correctAnswers: points\n        }\n        const newView = <MultipleChoiceResults \n                            deckName={ this.props.deckName } \n                            result={ result } \n                            exitView={ this.props.exitExercise } \n                        />\n        this.props.setNewView(newView)\n    }\n\n    checkState = () => {\n        console.log(this.state)\n    }\n\n    selectCard = (option) => {\n        this.setState({\n            answer: option\n        });\n    }\n\n    render() {\n        return (    \n            <div>\n                <button onClick={ this.checkState }>Check State</button>\n                \n                <h2>Multiple Choice Exercise:</h2>\n                <div>\n                    ( { this.props.deckNames.join(\", \")} )\n                </div>\n\n                <h3># of Questions: { this.props.cards.length }</h3>\n\n                <h3>Score: { this.state.correctAnswers } / { this.state.round }</h3>\n\n                <h1>- { this.state.currentCard[this.props.termDisplay] } -</h1>\n\n                <ul>\n                { \n                    this.state.answerOptions.map((option, i) => {\n                        return ( \n                            <MultipleChoiceCard \n                                index={ i }\n                                option={ option } \n                                answer={ this.state.answer }\n                                color={ option === this.state.answer ? \"#ffc40c\" : \"cadetblue\" }\n                                selectCard={ this.selectCard }\n                            />\n                        )\n                })}\n                </ul>\n\n                <button onClick={ this.submitAnswer }>Submit Answer</button>\n\n                <br></br><br></br><br></br>\n\n                <button onClick={ this.props.exitExercise }>Exit Exercise</button>\n\n            </div>\n        )\n    }\n\n}\n  \nexport default MultipleChoice","export const sleepOneSecond = () => {\n    return new Promise(resolve => setTimeout(resolve, 1000));\n} ","import React from 'react';\n\nconst SpeedGameCard = ({ index, term, selectCard }) => {\n    return (\n        <td key={`speed-card-${index}`} className=\"speed-card\" onClick={() => selectCard(term)}>\n            <div className=\"speed-card-text\">\n                { term }\n            </div>\n        </td>\n    );\n}\n  \nexport default SpeedGameCard","import React from 'react';\nimport SpeedGameCard from './SpeedGameCard'\n\n\nconst SpeedGameBoard = ({ cardDisplay, cards, selectCard }) => {\n\n    return (\n        <table>\n            <tbody>\n                <tr>\n                { cards.map((card, index) => {\n                    return (\n                        <SpeedGameCard \n                            index={ index }\n                            term={ card[cardDisplay] }\n                            selectCard={ selectCard }\n                        />\n                    )\n                })}\n                </tr>\n            </tbody>\n        </table>\n    );\n}\n  \nexport default SpeedGameBoard","import React, { Component } from 'react';\nimport { shuffleCards } from '../helperFunctions/shuffleCards'\nimport { sleepOneSecond } from '../helperFunctions/sleepOneSecond'\nimport SpeedGameBoard from '../components/SpeedGameBoard'\n\nclass SpeedGame extends Component {\n\n    constructor(){\n        super()\n        this.state = {\n            round: 0,\n            score: 0,\n            timer: 11,\n            currentSet: [{english: \"English Side\", spanish: \"Spanish Side\"}],\n            inPlay: true\n        }\n    }\n\n    componentDidMount(){\n        this.initializeGame()\n    }\n\n    initializeGame = () => {\n        this.setRound(0, 0)\n        this.timerMinusOne()\n    }\n\n    timerMinusOne = () => {\n        let time = this.state.timer - 1\n        if (time > 0 && this.state.inPlay){\n            this.setState({ timer: time })\n            sleepOneSecond()\n            .then(this.timerMinusOne)\n        } else if ((this.state.round + 1) < this.props.cards.length && this.state.inPlay) {\n            console.log(`round ${this.state.round + 1} === ${this.props.cards.length}`)\n            let score = this.state.score - 10\n            let round = this.state.round + 1\n            this.setRound(score, round)\n            sleepOneSecond()\n            .then(this.timerMinusOne)\n        } else {\n            return this.gameOver()\n        }\n    }\n\n    selectCard = (answer) => {\n        let score = this.state.score\n        answer === this.props.cards[this.state.round][this.props.cardDisplay] ? score += this.state.timer : score -= this.state.timer\n        let nextRound = this.state.round + 1\n        this.setRound(score, nextRound)\n    }\n\n    setRound = (score, round) => {\n        if (round >= this.props.cards.length){\n            console.log(\"End Game\")\n            this.endGame(score)\n        } else {\n            let filteredCards = [...this.props.cards.filter((card, i) => i !== round)]\n            let currentSet = shuffleCards([this.props.cards[round], ...shuffleCards(filteredCards).slice(0, 3)])\n            this.setState({\n                round: round,\n                score: score,\n                timer: 11,\n                currentSet: currentSet\n            })\n        }\n    }\n\n    endGame = (score) => {\n        this.setState({\n            round: 0,\n            score: score,\n            timer: 11,\n            currentSet: [{english: \"\", spanish: \"\"}, {english: \"\", spanish: \"\"}, {english: \"\", spanish: \"\"}, {english: \"\", spanish: \"\"}],\n            inPlay: false\n        })\n    }\n\n    gameOver = () => {\n        // need to add a view that shows game score - maybe send a game log fetch request as well\n        console.log(\"Game Over\")\n        this.props.exitExercise()\n    }\n\n    checkState = () => {\n        console.log(this.state)\n    }\n\n    render() {\n        return (\n            <div>\n                <button onClick={ this.checkState }>Check State</button>\n                \n                <h2>Speed Game Exercise:</h2>\n                <div>\n                    ( { this.props.deckNames.join(\", \")} )\n                </div>\n\n                <h3>Round: { this.state.round + 1 } / { this.props.cards.length }</h3>\n\n                <h3>Score: { this.state.score }</h3>\n\n                <h3>Timer: { this.state.timer }</h3>\n\n                <h1>- { this.props.cards[this.state.round][this.props.termDisplay] } -</h1>\n\n                <SpeedGameBoard \n                    cardDisplay={ this.props.cardDisplay }\n                    cards={ this.state.currentSet } \n                    selectCard={ this.selectCard }\n                />\n\n                <br></br><br></br>\n\n                <button onClick={ this.props.exitExercise }>Exit Exercise</button>\n\n            </div>\n        )\n    }\n\n}\n  \nexport default SpeedGame","import React, { Component } from 'react';\nimport { shuffleCards } from '../helperFunctions/shuffleCards'\n\nclass Bingo extends Component {\n\n    constructor(){\n        super()\n        this.state = {\n\n        }\n    }\n\n    componentDidMount(){\n        let cards = shuffleCards(this.props.cards)\n        console.log(cards)\n        this.setState({ \n            cards: cards\n        })\n    }\n\n    checkState = () => {\n        console.log(this.state)\n    }\n\n    render() {\n        return (\n            <div>\n                <button onClick={ this.checkState }>Check State</button>\n\n                <h2>Bingo Exercise:</h2>\n                <div>\n                    ( { this.props.deckNames.join(\", \")} )\n                </div>\n                \n                <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ0EUZ9lFKA-kWb2ddapVYDtN_JLECaISv7Eg&usqp=CAU\" alt=\"exercise under construction\"></img>\n\n                <br></br><br></br>\n  \n                <button onClick={ this.props.exitExercise }>Exit Exercise</button>\n            </div>\n        )\n    }\n\n}\n  \nexport default Bingo","import React, { Component } from 'react';\nimport Placeholder from '../components/Placeholder';\nimport Practice from '../exercises/Practice';\nimport MultipleChoice from '../exercises/MultipleChoice';\nimport SpeedGame from '../exercises/SpeedGame';\nimport Bingo from '../exercises/Bingo';\nimport { shuffleCards } from '../helperFunctions/shuffleCards';\n\nclass ExerciseContainer extends Component {\n\n    constructor(){\n        super()\n        this.state = {\n            view: <Placeholder />\n        }\n    }\n\n    componentDidMount(){\n        let activity = this.props.exercise.activity\n        this.setActivity(activity)\n    }\n\n    setPractice = () => {\n        this.setState({ \n            view: <Practice \n                    level={ this.props.exercise.level }\n                    deckNames={ this.props.exercise.deckNames } \n                    termDisplay={ this.props.exercise.termDisplay }\n                    cardDisplay={ this.props.exercise.cardDisplay }\n                    cards={ this.props.exercise.cards } \n                    exitExercise={ this.props.exitExercise } \n            /> \n        })\n    }\n\n    setMultipleChoice = () => {\n        this.setState({ \n            view: <MultipleChoice \n                    level={ this.props.exercise.level }\n                    deckNames={ this.props.exercise.deckNames } \n                    termDisplay={ this.props.exercise.termDisplay }\n                    cardDisplay={ this.props.exercise.cardDisplay }\n                    cards={ shuffleCards(this.props.exercise.cards) } \n                    exitExercise={ this.props.exitExercise } \n                    setNewView={ this.setNewView } \n            /> \n        })\n    }\n\n    setSpeedGame = () => {\n        this.setState({ \n            view: <SpeedGame \n                    level={ this.props.exercise.level }\n                    deckNames={ this.props.exercise.deckNames } \n                    termDisplay={ this.props.exercise.termDisplay }\n                    cardDisplay={ this.props.exercise.cardDisplay }\n                    cards={ shuffleCards(this.props.exercise.cards) }  \n                    exitExercise={ this.props.exitExercise } \n            /> \n        })\n    }\n\n    setBingo = () => {\n        this.setState({ \n            view: <Bingo \n                    level={ this.props.exercise.level }\n                    deckNames={ this.props.exercise.deckNames } \n                    termDisplay={ this.props.exercise.termDisplay }\n                    cardDisplay={ this.props.exercise.cardDisplay }\n                    cards={ shuffleCards(this.props.exercise.cards) } \n                    exitExercise={ this.props.exitExercise } \n                    changeView={ this.props.changeView }\n            /> \n        })\n    }\n\n    setActivity = (activity) => {\n        switch(activity){\n            case 'Practice':\n                this.setPractice()\n                break;\n            case 'Multiple Choice':\n                this.setMultipleChoice()\n                break;\n            case 'Speed Game':\n                this.setSpeedGame()\n                break;\n            case 'Bingo':\n                this.setBingo()\n                break;\n            default:\n                this.setState({ \n                    view: <Placeholder /> \n                })\n        }\n    }\n\n    setNewView = component => {\n        this.setState({ view: component })\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Exercise Container</h1>\n                { this.state.view }\n            </div>\n        )\n    }\n\n}\n  \nexport default ExerciseContainer","import React from 'react';\n\nconst BeginExerciseButton = ({ exercise, beginExercise, displayOptions }) => {\n    return (\n        <div>\n            <button onClick={ displayOptions }>Back to Options</button>\n            <h2>Level: { exercise.level }</h2>\n            <h2>Deck(s): </h2>\n            <div>\n                { exercise.deckNames.join(\" || \") }\n            </div>\n            <h2>Activity: { exercise.activity }</h2>\n            <button onClick={ () => beginExercise(exercise) }>Begin Exercise!</button>\n        </div>\n    );\n}\n  \nexport default BeginExerciseButton","import React, { Component } from 'react';\nimport { initializeApp } from '../actions/initializeApp'\nimport { createExerciseObject } from '../helperFunctions/createExerciseObject.js'\nimport { validateExercise } from '../helperFunctions/validateExercise.js'\nimport Placeholder from '../components/Placeholder.js'\nimport Welcome from '../components/Welcome.js'\nimport OptionsContainer from './OptionsContainer';\nimport ExerciseContainer from './ExerciseContainer';\nimport BeginExerciseButton from '../components/BeginExerciseButton'\n\nclass Home extends Component {\n\n    constructor(){\n        super()\n        this.state = {\n            decks: [],\n            view: <Placeholder />\n        }\n    }\n\n    componentDidMount(){\n       initializeApp(this.setDecks)\n       this.setState({ view: <Welcome displayOptions={ this.displayOptions } /> })\n    }\n\n    setDecks = (decks) => {\n        this.setState({ decks: decks })\n    }\n\n    changeView = (view) => {\n        this.setState({ view: view })\n    }\n\n    setExercise = (exercise) => {\n        let newExercise = createExerciseObject(exercise)\n        let validExercise = validateExercise(newExercise)\n        if (validExercise) {\n            this.setState({ \n                view: <BeginExerciseButton \n                    exercise={ newExercise } \n                    beginExercise={ this.beginExercise } \n                    displayOptions={ this.displayOptions }\n                /> })\n        }\n        \n    }\n\n    displayOptions = () => {\n        this.setState({ \n            view: <OptionsContainer \n                    decks={ this.state.decks } \n                    setExercise={ this.setExercise } \n            />\n        })\n    }\n\n    beginExercise = (exercise) => {\n        this.setState({ \n            view: <ExerciseContainer \n                    exercise={ exercise } \n                    exitExercise={ this.displayOptions } \n                    changeView={ this.changeView } \n            />\n        })\n    }\n\n    checkState = () => {\n        console.log(this.state)\n    }\n\n    render(){\n        return (\n        <div>\n            { this.state.view }\n            <br></br><br></br><br></br><br></br>\n            <button onClick={ this.checkState }>Check State</button>\n        </div>\n        );\n    }\n  \n}\n\nexport default Home;","import { API_ROOT } from '../apiRoot'\n\nexport const initializeApp = (setDecks) => {\n    console.log(API_ROOT)\n    return fetch(`${API_ROOT}decks`)\n    .then(response => response.json())\n    .then(decks => {\n        console.log(decks)\n        setDecks(decks)\n    })\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Home from './containers/Home'\n\nclass App extends Component {\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Home />\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}